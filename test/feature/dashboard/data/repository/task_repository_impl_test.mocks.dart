// Mocks generated by Mockito 5.3.2 from annotations
// in the_24_hour/test/feature/dashboard/data/repository/task_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:the_24_hour/feature/dashboard/data/datasource/task_remote_data_source.dart'
    as _i3;
import 'package:the_24_hour/feature/dashboard/data/model/task_model.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTaskModel_0 extends _i1.SmartFake implements _i2.TaskModel {
  _FakeTaskModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRemoteDataSource extends _i1.Mock
    implements _i3.TaskRemoteDataSource {
  @override
  _i4.Future<Iterable<_i2.TaskModel>> getTasksByDay(int? dayId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksByDay,
          [dayId],
        ),
        returnValue:
            _i4.Future<Iterable<_i2.TaskModel>>.value(<_i2.TaskModel>[]),
        returnValueForMissingStub:
            _i4.Future<Iterable<_i2.TaskModel>>.value(<_i2.TaskModel>[]),
      ) as _i4.Future<Iterable<_i2.TaskModel>>);
  @override
  _i4.Future<_i2.TaskModel> getTasksById() => (super.noSuchMethod(
        Invocation.method(
          #getTasksById,
          [],
        ),
        returnValue: _i4.Future<_i2.TaskModel>.value(_FakeTaskModel_0(
          this,
          Invocation.method(
            #getTasksById,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.TaskModel>.value(_FakeTaskModel_0(
          this,
          Invocation.method(
            #getTasksById,
            [],
          ),
        )),
      ) as _i4.Future<_i2.TaskModel>);
}
