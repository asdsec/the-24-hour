// Mocks generated by Mockito 5.3.2 from annotations
// in the_24_hour/test/feature/dashboard/domain/usecase/list_tasks_by_day_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:either/either.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:the_24_hour/feature/dashboard/domain/entity/task.dart' as _i6;
import 'package:the_24_hour/feature/dashboard/domain/repository/task_repository.dart'
    as _i3;
import 'package:the_24_hour/product/error/failure.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i3.TaskRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, Iterable<_i6.Task>>> listTasksByDay(
          int? dayId) =>
      (super.noSuchMethod(
        Invocation.method(
          #listTasksByDay,
          [dayId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, Iterable<_i6.Task>>>.value(
                _FakeEither_0<_i5.Failure, Iterable<_i6.Task>>(
          this,
          Invocation.method(
            #listTasksByDay,
            [dayId],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, Iterable<_i6.Task>>>.value(
                _FakeEither_0<_i5.Failure, Iterable<_i6.Task>>(
          this,
          Invocation.method(
            #listTasksByDay,
            [dayId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, Iterable<_i6.Task>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Task>> getTaskById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTaskById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>.value(
            _FakeEither_0<_i5.Failure, _i6.Task>(
          this,
          Invocation.method(
            #getTaskById,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>.value(
                _FakeEither_0<_i5.Failure, _i6.Task>(
          this,
          Invocation.method(
            #getTaskById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Task>> removeTask(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeTask,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>.value(
            _FakeEither_0<_i5.Failure, _i6.Task>(
          this,
          Invocation.method(
            #removeTask,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>.value(
                _FakeEither_0<_i5.Failure, _i6.Task>(
          this,
          Invocation.method(
            #removeTask,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>);
}
